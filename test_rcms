#!/usr/bin/ruby
# -*- coding: utf-8 -*-

require 'pp'
require 'open3'

# dockerfileを書き換える
install_cmds=STDIN.gets.split("|")

virtual_host = install_cmds[1].match(/VIRTUAL_HOST=(?<url>\S*)/)
virtual_host_url = virtual_host[:url]

site_id = install_cmds[1].match(/rcms-(?<site_id>\d*)/)[:site_id]


p site_id
p virtual_host_url

http_regex = /(https?:\/\/[^\"]*)/
install_cmds[0].match(http_regex)

docker_file = `curl -L "#{$1}"`

docker_cmds = docker_file.split("\n")
new_cmds = Array.new


# site_id = 120355
# JSON.generate(
#               {"target" => "",
#                "temp_path" => "/tmp",
#                "action" => "/install",
#                "run_list" => ["role['rcms_site']"],
#                "rcms" => {"SITE_ID" => "#{site_id}",
#                           "SITE_PATH" => "/home/rcms",
#                           "DOMAIN_NAME" => "#{virtual_host_url}.localhost",
#                           "ROOT_URL" => "http://#{virtual_host_url}.localhost",
#                           "ROOT_SSL_URL" => "http://#{virtual_host_url}.localhost",
#                           "IS_ADMIN_V2" => 0,
#                           "IS_USER_V2" => 0,
#                           "USE_ADMIN_PHP" => 0,
#                           "TOPICS_MAX_EXTENSION" => 30,
#                           "MEMBER_MAX_EXTENSION" => 99}})

# echo "{\"target\":\"\",\"temp_path\":\"/tmp\",\"action\":\"/install\",\"run_list\":[\"role['rcms_site']\"],\"rcms\":{\"SITE_ID\":\"120550\",\"SITE_PATH\":\"/home/rcms\",\"DOMAIN_NAME\":\"gmp.docke
# r\",\"ROOT_URL\":\"http://gmp.docker\",\"ROOT_SSL_URL\":\"http://gmp.docker\",\"IS_ADMIN_V2\":0,\"IS_USER_V2\":0,\"USE_ADMIN_PHP\":0,\"TOPICS_MAX_EXTENSION\":30,\"MEMBER_MAX_EXTENSION\":25}}"

# run_list_json = <<EOL
# {
# "target":"",
# "temp_path":"/tmp",
# "action":"/install",
# "run_list":["role['rcms_site']"],
# "rcms":{
#   "SITE_ID":"#{site_id}",
#   "SITE_PATH":"/home/rcms",
#   "DOMAIN_NAME":"#{virtual_host_url}.localhost",
#   "ROOT_URL":"http://#{virtual_host_url}.localhost",
#   "ROOT_SSL_URL":"http://#{virtual_host_url}.localhost",
#   "IS_ADMIN_V2":0,
#   "IS_USER_V2":0,
#   "USE_ADMIN_PHP":0,
#   "TOPICS_MAX_EXTENSION":30,
#   "MEMBER_MAX_EXTENSION":99}
# }
# EOL

# run_list_json = <<EOL
# {"target":"","temp_path":"/tmp","action":"/install","run_list":["role['rcms_site']"],"rcms":{"SITE_ID":"#{site_id}","SITE_PATH":"/home/rcms","DOMAIN_NAME":"#{virtual_host_url}.localhost","ROOT_URL":"http://#{virtual_host_url}.localhost","ROOT_SSL_URL":"http://#{virtual_host_url}.localhost","IS_ADMIN_V2":0,"IS_USER_V2":0,"USE_ADMIN_PHP":0,"TOPICS_MAX_EXTENSION":30,"MEMBER_MAX_EXTENSION":99}}
# EOL


docker_cmds.each_with_index do |cmd,i|

  if cmd.match(http_regex) then
    # new_cmds.push(cmd.split("&&")[0])

    rcms_install_shell = `curl -L "#{$1}"`

    rcms_install_shell.gsub!('192.168.59.103',virtual_host_url)

    rcms_install_cmds = rcms_install_shell.split("\n")
    rcms_install_cmds.each_with_index do |rcms_cmd,j|
      next if rcms_cmd.match("#") || rcms_cmd.empty? || j==1

      if rcms_cmd.match("RUN_LIST_JSON") then
        rcms_cmd.gsub!('"${RUN_LIST_JSON}"','/usr/local/chef/bin/run_list_rcms.json')
        # if rcms_cmd.match("echo") then
          #rcms_cmd = "echo '#{run_list_json}' > '/usr/local/chef/bin/run_list_rcms.json'"
          # new_cmds.push('RUN rm /var/lib/pgsql/9.4/data/postmaster.pid')
          # new_cmds.push('RUN /etc/init.d/postgresql-9.4 start')
        #   new_cmds.push('RUN ls -al /tmp/')
        # end
      end

      if rcms_cmd.match("chef")  || rcms_cmd.match("postgres") then
        rcms_cmd = '/etc/init.d/postgresql-9.4 start && ' + rcms_cmd
      end

      new_cmd = 'RUN '
      new_cmd += rcms_cmd
      new_cmds.push(new_cmd)
    end
    # new_cmds.push("RUN echo '#{rcms_install_shell}' | sh")
  else
    new_cmds.push(cmd)
  end
end

new_docker_file=""
new_cmds.each do |cmd|
  new_docker_file += cmd
  new_docker_file += "\n"
end

puts new_docker_file
puts install_cmds[1]

Open3.popen3("#{install_cmds[1]}") do |stdin, stdout, _stderr|
  stdin.puts  new_docker_file
  stdin.close
  puts stdout.read
end
